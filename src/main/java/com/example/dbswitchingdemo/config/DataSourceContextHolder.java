package com.example.dbswitchingdemo.config;

import java.util.Optional;

/**
 * Класс {@code DataSourceContextHolder} управляет текущим контекстом источника данных с использованием статической переменной.
 * Этот класс позволяет переключать источники данных в зависимости от потока, обеспечивая возможность динамического
 * выбора источника данных для каждого запроса.
 * <p>
 * Контекстом источника данных является строка, представляющая ключ источника данных, который может использоваться для
 * выбора правильной базы данных или соединения в зависимости от текущего контекста.
 */
public class DataSourceContextHolder {

    private static String contextHolder = null;

    /**
     * Устанавливает текущий контекст источника данных.
     * <p>
     * Этот метод сохраняет ключ источника данных, который будет использоваться для определения активного подключения
     * в последующих операциях.
     *
     * @param dsKey ключ источника данных, представляющий текущее подключение
     */
    public static void setDataSourceContext(String dsKey) {
        contextHolder = dsKey;
    }

    /**
     * Возвращает текущий контекст источника данных.
     * <p>
     * Если контекст был ранее установлен, возвращается его значение. Если контекст отсутствует, возвращается {@link Optional#empty()}.
     *
     * @return {@link Optional}, содержащий ключ источника данных, или пустой {@link Optional}, если контекст не установлен
     */
    public static Optional<String> getDataSourceContext() {
        return Optional.ofNullable(contextHolder);
    }

    /**
     * Очищает текущий контекст источника данных.
     * <p>
     * Этот метод сбрасывает сохраненное значение контекста, что полезно для предотвращения использования устаревшего
     * контекста и избегания утечек данных между запросами.
     */
    public static void clearDataSourceContext() {
        contextHolder = null;
    }
}
